{
  "Version": 1,
  "Description": "",
  "EngineInput": {
    "Definitions": [
      "",
      "",
      "",
      "",
      ""
    ],
    "IncludePaths": [
      "",
      "",
      "",
      ""
    ],
    "Models": [
      {
        "Format": 2,
        "Text": "conventions:\r\n  - Cdecl\r\n  - Stdcall\r\n  - Thiscall\r\n  - Fastcall\r\ncount: 6",
        "Path": "",
        "Name": "model"
      }
    ],
    "Template": "\r\nnamespace Mezzo.Interop\r\n{\r\n    {{~ for convention in model.conventions ~}}\r\n    [StructLayout(LayoutKind.Sequential)]\r\n    public unsafe struct {{convention}}Action\r\n    {\r\n        private readonly delegate* unmanaged[{{convention}}]\u003Cvoid\u003E _pointer;\r\n\r\n        public delegate* unmanaged[{{convention}}]\u003Cvoid\u003E Invoke =\u003E _pointer;\r\n    }\r\n    [StructLayout(LayoutKind.Sequential)]\r\n    public unsafe struct {{convention}}Func\u003CTResult\u003E\r\n        where TResult : unmanaged\r\n    {\r\n        private readonly delegate* unmanaged[{{convention}}]\u003CTResult\u003E _pointer;\r\n\r\n        public delegate* unmanaged[{{convention}}]\u003CTResult\u003E Invoke =\u003E _pointer;\r\n    }\r\n    {{~ params = [] ~}}\r\n    {{~ for i in 1..model.count ~}}\r\n    {{~ params = array.add params \u0022T\u0022 \u002B i ~}}\r\n    [StructLayout(LayoutKind.Sequential)]\r\n    public unsafe struct {{convention}}Action\u003C{{ params | array.join \u0022, \u0022 }}\u003E\r\n    {\r\n        private readonly delegate* unmanaged[{{convention}}]\u003C{{ params | array.join \u0022, \u0022 }}, void\u003E _pointer;\r\n    }\r\n    [StructLayout(LayoutKind.Sequential)]\r\n    public unsafe struct {{convention}}Func\u003C{{ params | array.join \u0022, \u0022 }}, TResult\u003E\r\n    {\r\n        private readonly delegate* unmanaged[{{convention}}]\u003C{{ params | array.join \u0022, \u0022 }}, TResult\u003E _pointer;\r\n\r\n        public delegate* unmanaged[{{convention}}]\u003CTResult\u003E Invoke =\u003E _pointer;\r\n    }\r\n    {{~ end ~}}\r\n    {{~ end ~}}\r\n}",
    "TemplatePath": ""
  },
  "OutputControl": {
    "Outputs": [
      {
        "Format": "csharp",
        "Name": "output",
        "Path": ""
      }
    ]
  }
}